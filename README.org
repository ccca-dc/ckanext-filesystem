[[https://travis-ci.org/surel89/ckanext-localimp.svg?branch=master%0A%20:target:%20https://travis-ci.org/surel89/ckanext-localimp]]

[[https://coveralls.io/repos/surel89/ckanext-localimp/badge.svg]]

#+BEGIN_QUOTE
  -  target :: [[https://coveralls.io/r/surel89/ckanext-localimp]]

#+END_QUOTE

[[https://pypip.in/download/ckanext-localimp/badge.svg%0A%20:target:%20https://pypi.python.org/pypi//ckanext-localimp/%0A%20:alt:%20Downloads]]

[[https://pypip.in/version/ckanext-localimp/badge.svg%0A%20:target:%20https://pypi.python.org/pypi/ckanext-localimp/%0A%20:alt:%20Latest%20Version]]

[[https://pypip.in/py_versions/ckanext-localimp/badge.svg%0A%20:target:%20https://pypi.python.org/pypi/ckanext-localimp/%0A%20:alt:%20Supported%20Python%20versions]]

[[https://pypip.in/status/ckanext-localimp/badge.svg%0A%20:target:%20https://pypi.python.org/pypi/ckanext-localimp/%0A%20:alt:%20Development%20Status]]

[[https://pypip.in/license/ckanext-localimp/badge.svg%0A%20:target:%20https://pypi.python.org/pypi/ckanext-localimp/%0A%20:alt:%20License]]

| ckanext-localimp   |

* Requirements

For example, you might want to mention here which versions of CKAN this
extension works with.

* Installation

To install ckanext-localimp:

1. Activate your CKAN virtual environment, for example:

   #+BEGIN_EXAMPLE
       . /usr/lib/ckan/default/bin/activate
   #+END_EXAMPLE

2. Install the ckanext-localimp Python package into your virtual
   environment:

   #+BEGIN_EXAMPLE
       pip install ckanext-localimp
   #+END_EXAMPLE

3. Add =localimp= to the =ckan.plugins= setting in your CKAN config file
   (by default the config file is located at
   =/etc/ckan/default/production.ini=).
4. Restart CKAN. For example if you've deployed CKAN with Apache on
   Ubuntu:

   #+BEGIN_EXAMPLE
       sudo service apache2 reload
   #+END_EXAMPLE

* Config Settings

Document any optional config settings here. For example:

#+BEGIN_EXAMPLE
    # The minimum number of hours to wait before re-checking a resource
    # (optional, default: 24).
    ckanext.localimp.some_setting = some_default_value
#+END_EXAMPLE

* Development Installation

To install ckanext-localimp for development, activate your CKAN
virtualenv and do:

#+BEGIN_EXAMPLE
    git clone https://github.com/surel89/ckanext-localimp.git
    cd ckanext-localimp
    python setup.py develop
    pip install -r dev-requirements.txt
#+END_EXAMPLE

* Running the Tests

To run the tests, do:

#+BEGIN_EXAMPLE
    nosetests --nologcapture --with-pylons=test.ini
#+END_EXAMPLE

To run the tests and produce a coverage report, first make sure you have
coverage installed in your virtualenv (=pip install coverage=) then run:

#+BEGIN_EXAMPLE
    nosetests --nologcapture --with-pylons=test.ini --with-coverage --cover-package=ckanext.localimp --cover-inclusive --cover-erase --cover-tests
#+END_EXAMPLE

---------------------------------Registering ckanext-localimp on PyPI
---------------------------------

ckanext-localimp should be availabe on PyPI as
[[https://pypi.python.org/pypi/ckanext-localimp]]. If that link doesn't
work, then you can register the project on PyPI for the first time by
following these steps:

1. Create a source distribution of the project:

   #+BEGIN_EXAMPLE
       python setup.py sdist
   #+END_EXAMPLE

2. Register the project:

   #+BEGIN_EXAMPLE
       python setup.py register
   #+END_EXAMPLE

3. Upload the source distribution to PyPI:

   #+BEGIN_EXAMPLE
       python setup.py sdist upload
   #+END_EXAMPLE

4. Tag the first release of the project on GitHub with the version
   number from the =setup.py= file. For example if the version number in
   =setup.py= is 0.0.1 then do:

   #+BEGIN_EXAMPLE
       git tag 0.0.1
       git push --tags
   #+END_EXAMPLE

----------------------------------------Releasing a New Version of
ckanext-localimp ----------------------------------------

ckanext-localimp is availabe on PyPI as
[[https://pypi.python.org/pypi/ckanext-localimp]]. To publish a new
version to PyPI follow these steps:

1. Update the version number in the =setup.py= file. See
   [[http://legacy.python.org/dev/peps/pep-0440/#public-version-identifiers][PEP
   440]] for how to choose version numbers.
2. Create a source distribution of the new version:

   #+BEGIN_EXAMPLE
       python setup.py sdist
   #+END_EXAMPLE

3. Upload the source distribution to PyPI:

   #+BEGIN_EXAMPLE
       python setup.py sdist upload
   #+END_EXAMPLE

4. Tag the new release of the project on GitHub with the version number
   from the =setup.py= file. For example if the version number in
   =setup.py= is 0.0.2 then do:

   #+BEGIN_EXAMPLE
       git tag 0.0.2
       git push --tags
   #+END_EXAMPLE


